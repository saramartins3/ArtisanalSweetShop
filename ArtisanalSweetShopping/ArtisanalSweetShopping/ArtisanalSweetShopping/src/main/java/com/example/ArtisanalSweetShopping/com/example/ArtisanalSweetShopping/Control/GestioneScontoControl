package com.example.ArtisanalSweetShopping.com.example.ArtisanalSweetShopping.Control;

import com.example.ArtisanalSweetShopping.com.example.ArtisanalSweetShopping.Database.ScontoDAO;
import com.example.ArtisanalSweetShopping.com.example.ArtisanalSweetShopping.Entity.ScontoEntity;
import com.example.ArtisanalSweetShopping.com.example.ArtisanalSweetShopping.Exception.DAOException;
import com.example.ArtisanalSweetShopping.com.example.ArtisanalSweetShopping.Exception.DBConnectionException;
import com.example.ArtisanalSweetShopping.com.example.ArtisanalSweetShopping.Exception.OperationException;

import java.util.List;

public class ScontoControl {

    public static class Input {
        // operazioni possibili: "CREA", "AGGIORNA", "ELIMINA", "LEGGI_TUTTI"
        public String operazione;

        // campi usati da CREA/AGGIORNA
        public String codiceSconto;
        public Float percentuale;
        public Integer idImpiegato;
        public Boolean utilizzato;
    }

    public static class Output {
        public ScontoEntity sconto;
        public List<ScontoEntity> lista;
        public String messaggio;

        public Output(ScontoEntity sconto, String messaggio) {
            this.sconto = sconto;
            this.messaggio = messaggio;
        }

        public Output(List<ScontoEntity> lista) {
            this.lista = lista;
        }
    }

    /**
     * Unico metodo “menu‐driven” per gestire tutti i casi:
     * CREA, AGGIORNA, ELIMINA, LEGGI_TUTTI.
     */
    public Output gestisciSconto(Input in) throws OperationException {
        if (in.operazione == null || in.operazione.isBlank()) {
            throw new OperationException("Operazione mancante.");
        }

        try {
            switch (in.operazione.toUpperCase()) {

                case "CREA":
                    if (in.codiceSconto == null || in.codiceSconto.isBlank()) {
                        throw new OperationException("Codice sconto mancante o vuoto.");
                    }
                    if (in.percentuale == null || in.percentuale <= 0 || in.percentuale > 100) {
                        throw new OperationException("Percentuale non valida (0<%≤100).");
                    }
                    ScontoEntity nuovo = new ScontoEntity(
                        in.codiceSconto,
                        in.percentuale,
                        in.idImpiegato == null ? 0 : in.idImpiegato,
                        in.utilizzato == null ? false : in.utilizzato
                    );
                    ScontoDAO.inserisciSconto(nuovo);
                    return new Output(nuovo, "Sconto creato con successo.");

                case "AGGIORNA":
                    if (in.codiceSconto == null || in.codiceSconto.isBlank()) {
                        throw new OperationException("Codice sconto mancante o vuoto.");
                    }
                    if (in.percentuale == null || in.percentuale <= 0 || in.percentuale > 100) {
                        throw new OperationException("Percentuale non valida (0<%≤100).");
                    }
                    if (!ScontoDAO.codiceEsistente(in.codiceSconto)) {
                        throw new OperationException("Codice sconto inesistente.");
                    }
                    ScontoEntity upd = new ScontoEntity(
                        in.codiceSconto,
                        in.percentuale,
                        in.idImpiegato == null ? 0 : in.idImpiegato,
                        in.utilizzato == null ? false : in.utilizzato
                    );
                    ScontoDAO.aggiornaSconto(upd);
                    return new Output(upd, "Sconto aggiornato con successo.");

                case "ELIMINA":
                    if (in.codiceSconto == null || in.codiceSconto.isBlank()) {
                        throw new OperationException("Codice sconto mancante.");
                    }
                    if (!ScontoDAO.codiceEsistente(in.codiceSconto)) {
                        throw new OperationException("Codice sconto inesistente.");
                    }
                    ScontoDAO.eliminaSconto(in.codiceSconto);
                    return new Output(null, "Sconto eliminato con successo.");

                case "LEGGI_TUTTI":
                    List<ScontoEntity> all = ScontoDAO.leggiTuttiSconti();
                    return new Output(all);

                default:
                    throw new OperationException("Operazione non riconosciuta: " + in.operazione);
            }

        } catch (DAOException | DBConnectionException e) {
            throw new OperationException("Errore interno: " + e.getMessage());
        }
    }
}

